package main

import (
	"context"
	"encoding/json"
	"fmt"
	"html/template"
	"io"
	"net/http"
	"os"

	"golang.org/x/oauth2/clientcredentials"
)

func main() {

	temp, err := template.ParseGlob("./templates/*.html")
	if err != nil {
		fmt.Printf(fmt.Sprintf("ERREUR => %s", err.Error()))
		return
	}

	http.HandleFunc("/album/jul", func(w http.ResponseWriter, r *http.Request) {
		albums, err := ApiJul()
		if err != nil {
			http.Error(w, fmt.Sprintf("erreur: %s", err.Error()), http.StatusMovedPermanently)
			return
		}
		temp.ExecuteTemplate(w, "jul", albums.Items)
	})

	http.HandleFunc("/track/sdm", func(w http.ResponseWriter, r *http.Request) {
		tracks, err := ApiSdm()
		if err != nil {
			http.Error(w, fmt.Sprintf("erreur: %s", err.Error()), http.StatusMovedPermanently)
		}
		temp.ExecuteTemplate(w, "sdm", tracks)
	})

	rootDoc, _ := os.Getwd()
	fileserver := http.FileServer(http.Dir(rootDoc + "/asset"))
	http.Handle("/static/", http.StripPrefix("/static/", fileserver))
	//Init serv
	http.ListenAndServe("localhost:8080", nil)

}

type AlbumJul struct {
	Items []struct {
		Name        string `json:"name"`
		AlbumImages []struct {
			Height int    `json:"height"`
			Url    string `json:"url"`
			Width  int    `json:"width"`
		} `json:"images`
		ReleaseDate string `json:"release_date"`
		TotalTracks int    `json:"total_tracks"`
	} `json:"items"`
}

func ApiJul() (AlbumJul, error) {

	// Configuration OAuth2
	urlApi := "https://api.spotify.com/v1/artists/3IW7ScrzXmPvZhB27hmfgy/albums"
	config := &clientcredentials.Config{
		ClientID:     "025dcf7af19d4c9aa364cf95efcbb111",
		ClientSecret: "b51023287e9c4142a9fe4f5c256b5159",
		TokenURL:     "https://accounts.spotify.com/api/token",
	}

	// Création du client HTTP avec le token OAuth2
	client := config.Client(context.Background())

	// Exemple d'utilisation du client pour effectuer une requête à l'API
	resp, err := client.Get(urlApi)
	if err != nil {
		return AlbumJul{}, fmt.Errorf("Erreur lors de la requête à l'API: %s", err.Error())
	}
	defer resp.Body.Close()

	body, errBody := io.ReadAll(resp.Body)
	if errBody != nil {
		return AlbumJul{}, fmt.Errorf("Erreur de lecture du body: %s", errBody.Error())
	}

	// Traitement de la réponse
	fmt.Println("Code réponse http:", resp.Status)

	var decodeDataJul AlbumJul

	errDecode := json.Unmarshal(body, &decodeDataJul)
	if errDecode != nil {
		return AlbumJul{}, fmt.Errorf("Erreur lors du décodage JSON: %s", errDecode.Error())
	}

	return decodeDataJul, nil
}

type TrackSdm struct {
	Artist struct {
		Artist string `json:"name"`
	}
	Album struct {
		AlbumName   string `json:"name"`
		ReleaseDate string `json:"release_date"`
	}
	Track struct {
		Title string `json:"name"`
	}
}

func ApiSdm() (TrackSdm, error) {

	// Configuration OAuth2

	urlApi := "https://api.spotify.com/v1/tracks/0EzNyXyU7gHzj2TN8qYThj?market=FR"

	config := &clientcredentials.Config{
		ClientID:     "025dcf7af19d4c9aa364cf95efcbb111",
		ClientSecret: "b51023287e9c4142a9fe4f5c256b5159",
		TokenURL:     "https://accounts.spotify.com/api/token",
	}

	// Création du client HTTP avec le token OAuth2
	client := config.Client(context.Background())

	// Exemple d'utilisation du client pour effectuer une requête à l'API
	resp, err := client.Get(urlApi)
	if err != nil {
		return TrackSdm{}, fmt.Errorf("Erreur lors de la requête à l'API: %s", err.Error())
	}
	defer resp.Body.Close()

	body, errBody := io.ReadAll(resp.Body)
	if errBody != nil {
		return TrackSdm{}, fmt.Errorf("Erreur de lecture du body: %s", errBody.Error())
	}

	// Traitement de la réponse
	fmt.Println("Code réponse http:", resp.Status)

	var decodeDataSdm TrackSdm

	errDecode := json.Unmarshal(body, &decodeDataSdm)
	if errDecode != nil {
		return TrackSdm{}, fmt.Errorf("Erreur lors du décodage JSON: %s", errDecode.Error())
	}

	return decodeDataSdm, nil
}
